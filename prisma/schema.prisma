generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  password  String
  name      String
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  orders    Order[]
  addresses Address[]

  @@map("users")
}

model Category {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  nameEn      String
  nameBn      String
  slug        String    @unique
  description String?
  image       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  products Product[]

  @@map("categories")
}

model Product {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  nameEn      String
  nameBn      String
  slug        String   @unique
  description String
  descriptionEn String
  descriptionBn String
  price       Float
  salePrice   Float?
  sku         String   @unique
  stock       Int      @default(0)
  images      String[]
  status      ProductStatus @default(ACTIVE)
  featured    Boolean  @default(false)
  categoryId  String   @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  category    Category @relation(fields: [categoryId], references: [id])
  orderItems  OrderItem[]

  @@map("products")
}

model Order {
  id              String      @id @default(auto()) @map("_id") @db.ObjectId
  orderNumber     String?      @unique
  userId          String      @db.ObjectId
  status          OrderStatus @default(PENDING)
  totalAmount     Float?
  shippingAmount  Float?       @default(0)
  taxAmount       Float?       @default(0)
  paymentStatus   PaymentStatus @default(PENDING)
  paymentMethod   String?
  shippingAddress String
  billingAddress  Json?
  notes  String?
  deliveryPartnerId String?   @db.ObjectId
  trackingNumber  String?
  estimatedDelivery DateTime?
  deliveredAt     DateTime?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  // Relations
  user            User        @relation(fields: [userId], references: [id])
  orderItems      OrderItem[]
  deliveryPartner DeliveryPartner? @relation(fields: [deliveryPartnerId], references: [id])

  @@map("orders")
}

model OrderItem {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  orderId   String   @db.ObjectId
  productId String   @db.ObjectId
  quantity  Int
  price     Float
  createdAt DateTime @default(now())

  // Relations
  order   Order   @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model Address {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  userId      String  @db.ObjectId
  type        AddressType
  firstName   String
  lastName    String
  company     String?
  address1    String
  address2    String?
  city        String
  state       String
  postalCode  String
  country     String  @default("BD")
  phone       String?
  isDefault   Boolean @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id])

  @@map("addresses")
}

model DeliveryPartner {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  email       String   @unique
  phone       String
  company     String
  serviceArea String[]
  isActive    Boolean  @default(true)
  apiKey      String?
  apiSecret   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  orders Order[]

  @@map("delivery_partners")
}

enum Role {
  USER
  ADMIN
  SUPER_ADMIN
}

enum ProductStatus {
  ACTIVE
  INACTIVE
  OUT_OF_STOCK
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum AddressType {
  SHIPPING
  BILLING
}
